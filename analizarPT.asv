function [P_locd, T_locd] = analizarPT(senyal)

t = [1:length(senyal)] / 360;

[qpos, rpos, spos] = analizarQRS(senyal);
fs = 360; %frecuencia de 360 Hz.

%removemos componente de DC

%signal = corrigeDeriva(senyal,360);

signal = senyal - mean(senyal);
signal = senyal / max(abs(senyal));

%1. Calculamos la distancia promedio entre R y R

rtmp = 0;

for i=1:length(rpos) - 1
    rtmp = rtmp + (rpos(i+1) - rpos(i));
    %ralt = ralt + signal(rpos(i));
end

%ralt = ralt / length(rpos);
rprom = rtmp / (length(rpos) - 1);
rprom = round(rprom / 2);
sg = 0;

for i=1:length(rpos)
    
    rposc = rpos(i);
    qposc = qpos(i);
    sposc = spos(i); 
    
    ralt = abs(signal(rpos(i)) - signal(spos(i)));
    
    if (rprom > qposc) %si estamos muy al inicio
        segpr = signal(1:qposc);
        sg = (rprom - rposc);
    else
        segpr = signal(rposc-rprom:qposc);
        sg = -1;
    end
    
    if (rposc + rprom > length(signal))
        segrt = signal(sposc+10:end);
    else
        segrt = signal(sposc+10:rposc+rprom);
    end

    
    
    %detectamos la Onda P
    if (length(segpr) == 0)
        
    end
    [P_value(i) P_loc(i)] = max(segpr);
    P_loc(i) = (rposc - rprom) + P_loc(i) + sg;
    
    %detectamos la Onda T
    [T_value(i) T_loc(i)] = max(segrt);
    T_loc(i) = T_loc(i) + sposc -1 + 10;
    
    umbral = signal(qpos(i)) + signal(rpos(i));
    umbral = umbral / 4;
    umbralt = abs(signal(qpos(i))) - abs(T_value(i));
    umbralt = abs(umbralt);
    
    %1. Umbral onda T
    
    if (umbralt < umbral * 0.4)
         T_value(i) = 0;
         T_loc(i) = 0;
         
         %si no hay onda T, no buscamos la P
         P_value(i) = 0;
         P_loc(i) = 0;
         continue
    end    
    
    %si hay onda T, buscamos la P
    
     umbral = umbralt;
     umbralp = abs(signal(qpos(i))) - abs(P_value(i));
     umbralp = abs(umbralp);

     if (umbralp < umbralt * 0.5)
         P_value(i) = 0;
         P_loc(i) = 0;
     end
end

%heuristica -- No pueden ser la Onda P y T demasiado cerca
for i=1:length(rpos) - 1
    if (T_loc(i) == P_loc(i+1))
        %arritmia - la onda P tiene prioridad
        T_loc(i) = 0;
        T_value(i) = 0;
        
        if (i+1 < length(rpos))        
            T_loc(i+1) = 0;
            T_value(i+1) = 0;
        end
     end
end


P_loc = abs(P_loc(P_loc~=0));
T_loc = abs(T_loc(T_loc~=0));
P_value = P_value(P_value~=0);
T_value = T_value(T_value~=0);

P_locd = P_loc;
T_locd = T_loc;

% title('P and T Signal');
% plot(t, signal, t(T_loc), T_value, '*',t(P_loc), P_value, 'o');
% legend('ECG','T', 'P');


function [ecgsg] = corrigeDeriva(ecgorsig, fs)
    ventana2 = 100; %ventana de 100 ms (Mitad de 200 ms)
    ventana_muestras = fs * ventana2 / 1000;
    linea0 = zeros(size(ecgorsig));
    
    for i=ventana_muestras:length(ecgorsig) - ventana_muestras,
        senyal = ecgorsig(i - ventana_muestras + 1:i+ventana_muestras);
        linea0(i) = median(senyal);
    end
    
    ventana2 = 300; %ventana de 300 ms (Mitad de 600 ms)
    ventana_muestras = fs * ventana2 / 1000;
    linea = zeros(size(ecgorsig));
    
    for i=ventana_muestras:length(ecgorsig) - ventana_muestras,
        senyal = linea0(i - ventana_muestras + 1:i+ventana_muestras);
        linea(i) = median(senyal);
    end
    
    ecgsg = ecgorsig - linea;   